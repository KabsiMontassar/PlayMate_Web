<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="{{ asset('Back/assets/vendor/bootstrap/css/bootstrap.min.css') }}" rel="stylesheet">
<link rel="stylesheet" href="{{ asset('Front/css/userprofile.css') }}">
<style>
body {
    background-color: #ededed;
    color: #033e6a;
    font-family: Arial, sans-serif;
}

.quarter-circle {
    background-color: #ffffff;
    opacity: 0.4;
    border-bottom-right-radius: 50%;
    padding: 20px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.nav-tabs-bordered .nav-item .nav-link {
    border-radius: 10px 10px 0 0;
    color: #033e6a;
  
}

.nav-tabs-bordered .nav-item .nav-link.active {
    background-color: #4caf30;
    color: #ffffff;
}

.card {
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.card-title {
    color: #033e6a;
    text-align: center; /* Centrer le titre */
    font-weight: bold; /* Mettre le titre en gras */
    margin-bottom: 20px; /* Ajouter un espace en bas du titre */
}

.btn-primary {
    background-color: #4caf30;
    border-color: #4caf30;
}

.btn-primary:hover {
    background-color: #033e6a;
    border-color: #033e6a;
}

.btn-secondary {
    background-color: #033e6a; /* Couleur bleu marine */
    border-color: #033e6a; /* Couleur bleu marine */
    color: #ffffff; /* Texte en blanc */
}

.btn-secondary:hover {
    background-color: #001e3e; /* Couleur plus foncée au survol */
    border-color: #001e3e; /* Couleur plus foncée au survol */
}

.bg {
  animation:slide 3s ease-in-out infinite alternate;
  background-image: linear-gradient(-60deg, #4CAF30 50%, #033E6A 50%);
  bottom:0;
  left:-50%;
  opacity:.5;
  position:fixed;
  right:-50%;
  top:0;
  z-index:-1;
}

.bg2 {
  animation-direction:alternate-reverse;
  animation-duration:4s;
}

.bg3 {
  animation-duration:5s;
} 

@keyframes slide {
  0% {
    transform:translateX(-25%);
  }
  100% {
    transform:translateX(25%);
  }
}
</style>
</head>
<body>
<div class="bg"></div>
<div class="bg bg2"></div>
<div class="bg bg3"></div>

<main id="main" class="main">

  

{{ form_start(form, {'attr': {'class': 'row g-3 needs-validation p-4', 'novalidate': 'novalidate'} }) }}

 <style>
    /* CSS styles here */
    .form-group {
      margin-bottom: 20px;
    }

    label {
      font-weight: bold;
    }

    input[type="text"],
    input[type="file"],
    select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      margin-top: 4px;
      margin-bottom: 10px;
    }

    button.btn {
      background-color: #4CAF50;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button.btn:hover {
      background-color: #45a049;
    }
  </style>
  
   
    {{ form_widget(form) }}


    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBKbAQafF9CzI3D1HJkRgwxWywnFK8oSgM&libraries=places&callback=initialize" async defer></script>
</script>
<input id="searchInput" type="text" placeholder="Recherchez une adresse" class="form-control">
<div id="map" style="height: 400px;"></div>
<button id="selectLocationBtn" class="btn btn-primary">Sélectionner cette localisation</button>
<script>
     var map;
    var markers = [];
    var selectedMarker;
    var searchBox;
    var geocoder;

    function initialize() {
        var mapOptions = {
            center: {lat: 36.8065, lng: 10.1815},
            zoom: 8
        };
        map = new google.maps.Map(document.getElementById('map'), mapOptions);
        geocoder = new google.maps.Geocoder();
        initSearchBox();

        // Ajoutez un écouteur de clic sur la carte pour ajouter un marqueur
        google.maps.event.addListener(map, 'click', function(event) {
            clearMarkers();
            addMarker(event.latLng);
            geocodeLatLng(event.latLng);
        });

        // Ajoutez un écouteur pour le clic sur le bouton de sélection
        document.getElementById('selectLocationBtn').addEventListener('click', function() {
            if (selectedMarker) {
                geocodeLatLng(selectedMarker.getPosition());
            }
        });
    }

    // Fonction pour convertir une position en adresse et la mettre dans le champ du formulaire
    function geocodeLatLng(latlng) {
    geocoder.geocode({ 'location': latlng }, function (results, status) {
        if (status === 'OK') {
            if (results[0]) {
                var addressFound = false;
                // Essayez d'abord de trouver une adresse de rue ou une route.
                for (var i = 0; i < results.length; i++) {
                    if (results[i].types.indexOf('street_address') !== -1 || results[i].types.indexOf('route') !== -1) {
                        document.getElementById('{{ form.address.vars.id }}').value = results[i].formatted_address;
                        addressFound = true;
                        break; // Adresse trouvée, quittez la boucle.
                    }
                }
                // Si aucune rue n'est trouvée, essayez de trouver un quartier ou une zone politique.
                if (!addressFound) {
                    for (var i = 0; i < results.length; i++) {
                        if (results[i].types.indexOf('political') !== -1 || results[i].types.indexOf('sublocality') !== -1 || results[i].types.indexOf('locality') !== -1) {
                            document.getElementById('{{ form.address.vars.id }}').value = results[i].formatted_address;
                            addressFound = true;
                            break; // Adresse trouvée, quittez la boucle.
                        }
                    }
                }
                // Si aucun résultat plus spécifique n'est trouvé, utilisez le résultat le plus général.
                if (!addressFound) {
                    document.getElementById('{{ form.address.vars.id }}').value = results[0].formatted_address;
                }
            } else {
                window.alert('No results found');
            }
        } else {
            window.alert('Geocoder failed due to: ' + status);
        }
    });
}

    function addMarker(location) {
        clearMarkers();
        var marker = new google.maps.Marker({
            position: location,
            map: map
        });
        markers.push(marker);
        selectedMarker = marker;
    }

    function clearMarkers() {
        for (var marker of markers) {
            marker.setMap(null);
        }
        markers = [];
    }

    function initSearchBox() {
        var input = document.getElementById('searchInput');
        searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        searchBox.addListener('places_changed', function() {
            var places = searchBox.getPlaces();
            if (places.length == 0) return;

            clearMarkers();
            var bounds = new google.maps.LatLngBounds();
            for (var place of places) {
                if (!place.geometry) return;
                addMarker(place.geometry.location);
                if (place.geometry.viewport) bounds.union(place.geometry.viewport);
                else bounds.extend(place.geometry.location);
            }
            map.fitBounds(bounds);
        });
    }

    google.maps.event.addDomListener(window, 'load', initialize);
</script>

    <button class="btn">{{ button_label|default('Ajouter') }}</button>
    
{{ form_end(form) }}
</section>
</main>

 </body>
</html>
