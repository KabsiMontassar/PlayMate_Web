
{{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': true}}) }}
                <div class="mb-3">
                    {{ form_label(form.nom, null, {'label_attr': {'class': 'form-label'}}) }}
                    {% set errorClass = form.nom.vars.errors is not empty ? 'is-invalid' : '' %}
                    {{ form_widget(form.nom, {'attr': {'class': 'form-control ' ~ errorClass }}) }}
                    {% if form.nom.vars.errors %}
                            <div class="invalid-feedback">
                                {{ form_errors(form.nom) }}
                            </div>
                        {% endif %}
                </div>

                <div class="mb-3">
                    {{ form_label(form.affiche, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.affiche, {'attr': {'class': 'form-control'}}) }}
                    <img id="preview-image" src="#" alt="Aperçu de l'affiche" class="img-thumbnail mt-2" style="display: none;">
                </div>

                <div class="mb-3">
                    {{ form_label(form.address, null, {'label_attr': {'class': 'form-label'}}) }}
                    {% set errorClass = form.address.vars.errors is not empty ? 'is-invalid' : '' %}
                    {{ form_widget(form.address, {'attr': {'class': 'form-control ' ~ errorClass }}) }}
                   {% if form.address.vars.errors %}
                            <div class="invalid-feedback">
                                {{ form_errors(form.address) }}
                            </div>
                        {% endif %}
                </div>

                <div class="mb-3">
                    {{ form_label(form.datedebut, null, {'label_attr': {'class': 'form-label'}}) }}
                    {% set errorClass = form.datedebut.vars.errors is not empty ? 'is-invalid' : '' %}
                    {{ form_widget(form.datedebut, {'attr': {'class': 'form-control ' ~ errorClass }}) }}
                   {% if form.datedebut.vars.errors %}
                            <div class="invalid-feedback">
                                {{ form_errors(form.datedebut) }}
                            </div>
                        {% endif %}
                </div>

                <div class="mb-3">
                    {{ form_label(form.datefin, null, {'label_attr': {'class': 'form-label'}}) }}
                    {% set errorClass = form.datefin.vars.errors is not empty ? 'is-invalid' : '' %}
                    {{ form_widget(form.datefin, {'attr': {'class': 'form-control ' ~ errorClass }}) }}
                {% if form.datefin.vars.errors %}
                            <div class="invalid-feedback">
                                {{ form_errors(form.datefin) }}
                            </div>
                        {% endif %}
                </div>

                <div class="mb-3">
                    {{ form_label(form.nbmaxequipe, null, {'label_attr': {'class': 'form-label'}}) }}
                    <input type="range" class="form-range" id="teamRange" value="1" min="0" max="4" step="1">
                    <p>Nombre d'équipes : <span id="nbTeams">8</span></p>
                    
                </div>

                <div class="text-center">
                    <button class="btn btn-primary" type="submit">{{ button_label|default('Enregistrer') }}</button>
                </div>

                {{ form_end(form) }}


  <script>
    const steps = [4, 8, 16, 24, 32];
    var slider = document.getElementById('teamRange');
    var span = document.getElementById('nbTeams');
    span.innerHTML = steps[slider.value];
    slider.oninput = function() {
        span.innerHTML = steps[this.value];
        document.getElementById('{{ form.nbmaxequipe.vars.id }}').value = steps[this.value];
    };

    // Pour l'aperçu de l'image
    document.getElementById('{{ form.affiche.vars.id }}').onchange = function (e) {
        var reader = new FileReader();
        reader.onload = function (e) {
            document.getElementById('preview-image').src = e.target.result;
            document.getElementById('preview-image').style.display = 'block';
        };
        reader.readAsDataURL(e.target.files[0]);
    };
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBKbAQafF9CzI3D1HJkRgwxWywnFK8oSgM&libraries=places&callback=initialize" async defer></script>
</script>
<input id="searchInput" type="text" placeholder="Recherchez une adresse" class="form-control">
<div id="map" style="height: 400px;"></div>
<button id="selectLocationBtn" class="btn btn-primary">Sélectionner cette localisation</button>
<script>
     var map;
    var markers = [];
    var selectedMarker;
    var searchBox;
    var geocoder;

    function initialize() {
        var mapOptions = {
            center: {lat: 36.8065, lng: 10.1815},
            zoom: 8
        };
        map = new google.maps.Map(document.getElementById('map'), mapOptions);
        geocoder = new google.maps.Geocoder();
        initSearchBox();

        // Ajoutez un écouteur de clic sur la carte pour ajouter un marqueur
        google.maps.event.addListener(map, 'click', function(event) {
            clearMarkers();
            addMarker(event.latLng);
            geocodeLatLng(event.latLng);
        });

        // Ajoutez un écouteur pour le clic sur le bouton de sélection
        document.getElementById('selectLocationBtn').addEventListener('click', function() {
            if (selectedMarker) {
                geocodeLatLng(selectedMarker.getPosition());
            }
        });
    }

    // Fonction pour convertir une position en adresse et la mettre dans le champ du formulaire
    function geocodeLatLng(latlng) {
    geocoder.geocode({ 'location': latlng }, function (results, status) {
        if (status === 'OK') {
            if (results[0]) {
                var addressFound = false;
                // Essayez d'abord de trouver une adresse de rue ou une route.
                for (var i = 0; i < results.length; i++) {
                    if (results[i].types.indexOf('street_address') !== -1 || results[i].types.indexOf('route') !== -1) {
                        document.getElementById('{{ form.address.vars.id }}').value = results[i].formatted_address;
                        addressFound = true;
                        break; // Adresse trouvée, quittez la boucle.
                    }
                }
                // Si aucune rue n'est trouvée, essayez de trouver un quartier ou une zone politique.
                if (!addressFound) {
                    for (var i = 0; i < results.length; i++) {
                        if (results[i].types.indexOf('political') !== -1 || results[i].types.indexOf('sublocality') !== -1 || results[i].types.indexOf('locality') !== -1) {
                            document.getElementById('{{ form.address.vars.id }}').value = results[i].formatted_address;
                            addressFound = true;
                            break; // Adresse trouvée, quittez la boucle.
                        }
                    }
                }
                // Si aucun résultat plus spécifique n'est trouvé, utilisez le résultat le plus général.
                if (!addressFound) {
                    document.getElementById('{{ form.address.vars.id }}').value = results[0].formatted_address;
                }
            } else {
                window.alert('No results found');
            }
        } else {
            window.alert('Geocoder failed due to: ' + status);
        }
    });
}

    function addMarker(location) {
        clearMarkers();
        var marker = new google.maps.Marker({
            position: location,
            map: map
        });
        markers.push(marker);
        selectedMarker = marker;
    }

    function clearMarkers() {
        for (var marker of markers) {
            marker.setMap(null);
        }
        markers = [];
    }

    function initSearchBox() {
        var input = document.getElementById('searchInput');
        searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        searchBox.addListener('places_changed', function() {
            var places = searchBox.getPlaces();
            if (places.length == 0) return;

            clearMarkers();
            var bounds = new google.maps.LatLngBounds();
            for (var place of places) {
                if (!place.geometry) return;
                addMarker(place.geometry.location);
                if (place.geometry.viewport) bounds.union(place.geometry.viewport);
                else bounds.extend(place.geometry.location);
            }
            map.fitBounds(bounds);
        });
    }

    google.maps.event.addDomListener(window, 'load', initialize);
</script>
